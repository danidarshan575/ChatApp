// NAME : Darshan Dani


// This class is for Clients. It takes input from the user and sends it to the server. Also, it receives data from server which is sent by other clients to this client and
// displays it.

import javax.swing.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;

public class Client extends javax.swing.JFrame {

    private String clientName;
    private Socket s;
    private ObjectInputStream objectInputStream;
    private ObjectOutputStream objectOutputStream;

    Message message = new Message();

    /**
     * Creates new form NewJFrame
     */
    public Client() throws IOException {

        // Creating the initial login prompt.

        JFrame frame = new JFrame("Login Page");
        clientName = JOptionPane.showInputDialog(frame, "Enter your username");

        if(Server.clients.contains(clientName)) {

            showMessageDialog(null, "This username already exists. Please choose a different username", "Error !", ERROR_MESSAGE);
        }


        if(!clientName.isEmpty() && connectToServer(clientName)) {

            initComponents();

            txtClientLog.append("Hello, "+clientName+"\n\n");

            receiveData();

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtConnectedClients = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtClientLog = new javax.swing.JTextArea();
        btnDisconnect = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSend.setText("Send Message");
        btnSend.setToolTipText("");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnSendActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        txtConnectedClients.setColumns(20);
        txtConnectedClients.setRows(5);
        jScrollPane3.setViewportView(txtConnectedClients);

        txtClientLog.setColumns(20);
        txtClientLog.setRows(5);
        jScrollPane4.setViewportView(txtClientLog);
        txtClientLog.getAccessibleContext().setAccessibleName("");

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                                .addContainerGap())
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(147, 147, 147))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                        .addComponent(jScrollPane4))
                                .addGap(18, 18, 18)
                                .addComponent(btnSend)
                                .addGap(18, 18, 18)
                                .addComponent(btnDisconnect)
                                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    // The following methods are used to pertform appropriate actions on button clicks.

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        // This is the 'Send' Button.
        JFrame frame = new JFrame("Messenger");

       Message message1 = new Message();
       String textMessage = JOptionPane.showInputDialog(frame, "Enter the message !");

        message1.setClientName(clientName);

        message1.setMessage(textMessage);

        objectOutputStream.writeObject(message1);

    }

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        // This is the 'Disconnect' Button.
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Client().setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private boolean connectToServer(String name) {
        // This method establishes the client's connection with server over port number 63222.
        // It takes the client's name as input and return a boolean true if connection is successful and false otherwise.

        try {

            s = new Socket("localhost", 63222);

            objectOutputStream = new ObjectOutputStream(s.getOutputStream());

            message.setClientName(name);

            objectOutputStream.writeObject(message);

            objectOutputStream.flush();

            return true;
        }
        catch (Exception e) {

            e.printStackTrace();

            return false;
        }
    }

    public void receiveData() {

        // This method is used to receive data sent by other clients.

        Thread receive = new Thread(new Runnable() {
            @Override
            public void run() {

                try {

                    objectInputStream = new ObjectInputStream(s.getInputStream());
                }
                catch (Exception e) {

                    e.printStackTrace();
                }

                while(true) {

                    try {

                        Message message = (Message) objectInputStream.readObject();

                        String clientName = message.getClientName();
                        String textMessage = message.getMessage();

                        // This is what I tried to do in order to broadcast messages.
                        System.out.println(textMessage);
                        txtClientLog.append(clientName+":  "+textMessage+"\n");
                    }

                    catch (Exception e) {

                        e.printStackTrace();
                    }
                }
            }
        });

        receive.start();
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea txtClientLog;
    private static javax.swing.JTextArea txtConnectedClients;
    // End of variables declaration
}
