// NAME : Darshan Dani
// UTA ID : 1001764937

// This is the server class. It takes and sends messages from one client to other clients.

import javax.swing.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class Server extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame1
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtServerLog = new javax.swing.JTextArea();
        btnStartServer = new javax.swing.JButton();
        btnStopServer = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtServerConnections = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtServerLog.setColumns(20);
        txtServerLog.setRows(5);
        jScrollPane2.setViewportView(txtServerLog);

        btnStartServer.setText("Start Server");
        btnStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServerActionPerformed(evt);
            }
        });

        btnStopServer.setText("Stop Server");
        btnStopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopServerActionPerformed(evt);
            }
        });

        txtServerConnections.setColumns(20);
        txtServerConnections.setRows(5);
        jScrollPane3.setViewportView(txtServerConnections);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnStartServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnStopServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(159, 159, 159))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3))
                                .addGap(18, 18, 18)
                                .addComponent(btnStartServer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStopServer)
                                .addContainerGap(19, Short.MAX_VALUE))
        );

        btnStopServer.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>

    static ArrayList<ClientHandler> ar = new ArrayList<>();  // This is for each client handler. This will be printed on the prompts

    static List<String> clients = new ArrayList<>();

    static int i = 0;

    static String disconnectedClient = "";   // This can be removed

    private void btnStartServerActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        // This is the 'Start Server' Button

        new Thread(new Runnable() {
            @Override
            public void run() {

                try {

                    startServer();
                }
                catch (Exception e) {

                    e.printStackTrace();
                }
            }
        }).start();
    }

    private void btnStopServerActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        // 'Stop Server' Button

        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnStartServer;
    private javax.swing.JButton btnStopServer;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JTextArea txtServerConnections;
    static javax.swing.JTextArea txtServerLog;
    // End of variables declaration

    public void startServer() throws IOException, ClassNotFoundException {
    //  Creating and establishing socket connection.
        ServerSocket ss = new ServerSocket(63222);

        txtServerLog.append("Server has been started.\n\n");

        Socket s;

        while(true) {

            s = ss.accept();

            ObjectInputStream objectInputStream = new ObjectInputStream(s.getInputStream());
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(s.getOutputStream());

            Message message = (Message) objectInputStream.readObject();

            ClientHandler clientHandler = new ClientHandler(s, message.getClientName(), objectInputStream, objectOutputStream);

            Thread t = new Thread(clientHandler);

            txtServerLog.append(message.clientName+" connected.\n");

            clients.add(message.getClientName());
            printClients();

            ar.add(clientHandler);

            t.start();
        }
    }

    public static void printClients() {
        // This method is used to show the list of currently connected clients.

        if(SwingUtilities.isEventDispatchThread()) {

            txtServerConnections.setText(String.join("\n", clients));
          //  txtServerLog.append(disconnectedClient+" has disconnected...\n\n");
        }
        else {

            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {

                    txtServerConnections.setText(String.join("\n", clients));
                   // txtServerLog.append(disconnectedClient+" has disconnected...\n\n");
                }
            });
        }
    }
}
